{"version":3,"sources":["Game/index.js","App.js","reportWebVitals.js","index.js"],"names":["values","suits","Card","props","xOffset","yOffset","value","length","indexOf","className","style","backgroundImage","width","cardWidth","height","cardHeight","overflow","backgroundPosition","dealHand","arr","player","out","i","push","Hit","onClick","Stand","Table","sleep","milliseconds","Promise","resolve","setTimeout","deck","Array","keys","shuffleDeck","state","dealerHand","playerHand","isStanding","dealerStanding","getCard","pop","temp","dealerScore","calculateScore","slice","shuffled","index","Math","floor","random","next","splice","addHidden","score","aces","val","isNaN","parseInt","this","toString","cardVal","suit","hand","dealer","blackjack","bust","setState","playerScore","stand","then","r","hitDealer","getScoreString","handleHit","handleStand","getStateText","React","Component","Game","window","location","reload","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c40155de.chunk.js","sourcesContent":["import React from 'react'\nimport './index.css';\n\nconst cardWidth = 70;\nconst cardHeight = 94;\n\nconst values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'K', 'Q', 'A']\nconst suits = ['H', 'C', 'D', 'S'];\n\nfunction Card(props) {\n    var xOffset = 0;\n    var yOffset = 0;\n\n    if ('value' in props && props.value.length === 2) {\n        xOffset = values.indexOf(props.value[0], 0) + 1;\n        yOffset = suits.indexOf(props.value[1], 0);\n    }\n    \n    return (\n        <div\n         className='Card'\n         style={{backgroundImage: 'url(https://img.itch.zone/aW1hZ2UvNzE1Mzg3LzM5NjQ5MzEucG5n/original/iwG3hK.png)',\n                 width: cardWidth + 'px',\n                 height: cardHeight + 'px',\n                 overflow: 'hidden',\n                 backgroundPosition: -xOffset * cardWidth + 'px ' + -yOffset * cardHeight + 'px'\n               }}\n        />\n    );\n}\n\nfunction dealHand(arr, player) {\n    var out = [];\n    for (var i = 0; i < arr.length; i++) {\n        out.push(<Card key={(player ? 'Player' : 'Dealer') + i} value={arr[i]} />);\n    }\n    return (out);\n}\n\nfunction Hit(props) {\n    return (\n        <div onClick={props.onClick}>\n         <b>Hit</b><br />\n         <Card />\n        </div>\n    );\n}\n\nfunction Stand(props) {\n    return (\n        <div onClick={props.onClick}>\n         <b>Stand</b><br />\n         <Card />\n        </div>\n    );\n}\n\nclass Table extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        var deck = [...Array(52).keys()]\n        deck = this.shuffleDeck(deck);\n        this.state = {\n            deck: deck,\n            dealerHand: [],\n            playerHand: [],\n            isStanding: false,\n            dealerStanding: false,\n        };\n\n        this.state.playerHand.push(this.getCard(this.state.deck.pop()));\n        this.state.playerHand.push(this.getCard(this.state.deck.pop()));\n        \n        this.state.dealerHand.push(this.getCard(this.state.deck.pop()) + 'H');\n        this.state.dealerHand.push(this.getCard(this.state.deck.pop()));\n\n        var temp = this.state.dealerHand;\n        var dealerScore = this.calculateScore(temp, true);\n        if (dealerScore === 21 || this.calculateScore(this.state.playerHand, true) === 21) {\n            temp[0] = temp[0].slice(0,-1);\n            this.state.dealerHand = temp;\n            this.state.isStanding = true;\n            this.state.dealerStanding = dealerScore === 21;\n        }\n    }\n\n    shuffleDeck(arr) {\n        var shuffled = [];\n\n        while (arr.length > 0) {\n            var index = Math.floor(Math.random() * arr.length);\n            var next = arr.splice(index, 1);\n            shuffled.push(next[0]);\n        }\n        return shuffled;\n    }\n\n    calculateScore(arr, addHidden) {\n        var score = 0;\n        var aces = 0;\n        for (var i = 0; i < arr.length; i++) {\n            // Don't include hidden value\n            if (!addHidden && arr[i].length > 2) {\n                continue;\n            }\n            var val = arr[i][0];\n            if (!isNaN(val)) {\n                score += parseInt(val);\n            } \n            else if (val !== 'A') {\n                score += 10;\n            }\n            else {\n                aces += 1\n            }\n\n        }\n\n        while (aces > 0) {\n            // Add 11 if it's the last ace and it still fits\n            if (aces === 1 && (score + 11) <= 21) {\n                score += 11;\n            }\n            else {\n                score += 1;\n            }\n            aces--;\n        }\n\n        return score;\n    }\n\n    getScoreString(arr) {\n        var out = '';\n        var score = this.calculateScore(arr, false);\n\n        if (score === 21) {\n            out = 'Blackjack!';\n        }\n        else if (score > 21) {\n            out = 'Bust!'\n        }\n        else {\n            if (arr[0].length > 2) {\n                out += '>';\n            }\n            out += score.toString();\n        }\n        return out;\n    }\n\n    getCard(cardVal) {\n        var suit = Math.floor(cardVal / 13);\n        var value = cardVal % 13;\n        var out = values[value] + suits[suit]\n        return out;\n    }\n\n    handleHit() {\n        var hand = this.state.playerHand;\n        if (this.state.isStanding ||\n            this.calculateScore(this.state.dealerHand, true) === 21 ||\n            this.calculateScore(hand, true) >= 21) {\n            return;\n        }\n\n        var deck = this.state.deck;\n        hand.push(this.getCard(deck.pop()));\n\n        var dealer = this.state.dealerHand;\n        var blackjack = this.calculateScore(hand, true) === 21;\n        var bust = this.calculateScore(hand, true) > 21;\n        if (this.calculateScore(hand, true) >= 21) {\n            dealer[0] = dealer[0].slice(0, 2);\n        }\n        this.setState({\n            deck: deck,\n            playerHand: hand,\n            dealerHand: dealer,\n            isStanding: blackjack || bust,\n            dealerStanding: bust,\n        });\n    }\n\n    handleStand() {\n        if (this.state.isStanding ||\n            this.calculateScore(this.state.playerHand, false) >= 21) {\n            return;\n        }\n        var temp = this.state.dealerHand;\n        temp[0] = temp[0].slice(0, 2);\n        this.setState({                        \n            deck: this.state.deck,                        \n            dealerHand: temp, \n            playerHand: this.state.playerHand, \n            isStanding: true, \n            dealerStanding: this.state.dealerStanding,\n        });                                    \n    }\n\n    getStateText() {\n        var out = '';\n\n        var playerScore = this.calculateScore(this.state.playerHand, true);\n        var dealerScore = this.calculateScore(this.state.dealerHand, true);\n\n        if (!this.state.isStanding || !this.state.dealerStanding) {\n            return out;\n        }\n        if (playerScore > dealerScore) {\n            out = 'You Win!';\n        }\n        else {\n            out = 'Dealer Wins!';\n        }\n\n        if (playerScore === 21 && dealerScore === 21) {\n            out = 'Draw!';\n        }\n\n        if (playerScore > 21) {\n            out = 'Dealer Wins!';\n        }\n        else if (dealerScore > 21) {\n            out = 'You Win!';\n        }\n\n        return out;\n    }\n\n    sleep = (milliseconds) => {\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\n    }\n\n    hitDealer() {\n        var hand = this.state.dealerHand;\n        var deck = this.state.deck;\n        if (this.calculateScore(hand, true) < 17 &&\n            this.calculateScore(hand, true) < this.calculateScore(this.state.playerHand, true)) {\n            hand.push(this.getCard(deck.pop()));\n        }\n        var stand = this.calculateScore(hand, true) >= 17 ||\n                    this.calculateScore(hand, true) >= this.calculateScore(this.state.playerHand, true);\n        this.sleep(1000).then(r => {\n            this.setState({\n                deck: deck,\n                playerHand: this.state.playerHand,\n                dealerHand: hand,\n                isStanding: this.state.isStanding,\n                dealerStanding: stand,\n            });\n        });\n    }\n\n    componentDidMount() {\n        if (this.state.isStanding && !this.state.dealerStanding) {\n            this.hitDealer();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.isStanding && !this.state.dealerStanding) {\n            this.hitDealer();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n             <div className='Hand'>\n              <b>You: {this.getScoreString(this.state.playerHand)}</b><br />\n              <div>\n               {dealHand(this.state.playerHand, true)}\n              </div>\n             </div>\n             <div className='Dealer'>\n              <div>\n               {dealHand(this.state.dealerHand, false)}\n              </div>\n              <b>Dealer: {this.getScoreString(this.state.dealerHand)}</b><br />\n             </div>\n             <div className='Hit'>\n              <Hit onClick={() => this.handleHit()} />\n             </div>\n             <div className='Stand'>\n              <Stand  onClick={() => this.handleStand()} />\n             </div>\n             <div className='EndText'>\n              <b>{this.getStateText()}</b>\n             </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className='Window'>\n             <div className='Table'>\n              <Table /> \n             </div>\n             <div className='Reset'>\n              <button onClick={() => window.location.reload(false)}>New Game</button>\n             </div>\n            </div>\n        );\n    }\n}\nexport default Game;\n","import './App.css';\nimport Game from './Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Blackjack</h1>\n        <Game />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}